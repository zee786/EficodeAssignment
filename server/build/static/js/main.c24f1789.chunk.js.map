{"version":3,"sources":["MiddlewareAPI.js","ShowEventsData.js","App.js","reportWebVitals.js","index.js"],"names":["parseBody","data","a","name","has","body","parseResponse","response","isCamelCase","ok","error","Error","apiErrorCode","apiErrorMessage","message","json","camelize","get","path","authToken","fetch","headers","mode","getEvents","token","EventsData","events","console","log","isEmpty","TableContainer","component","Paper","Table","sx","minWidth","TableHead","TableRow","TableCell","align","TableBody","map","event","border","scope","id","date","sensor1","sensor2","sensor3","sensor4","App","useState","setEvents","useEffect","fetchData","eventResponse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c24f1789.chunk.js","sourcesContent":["import camelize from \"camelize\";\r\nimport { has, isEmpty } from \"lodash\";\r\n\r\nasync function post(path, body, { headers = {}, ...rest } = {}) {\r\n  const _headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    ...headers\r\n  };\r\n  try {\r\n    const response = await fetch(`https://${path}`, {\r\n      ...rest,\r\n      method: \"POST\",\r\n      headers: await _headers,\r\n      body: JSON.stringify(body),\r\n      mode: \"cors\"\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n\r\nexport async function getToken(email, password) {\r\n  const body = {\r\n    email,\r\n    password\r\n  };\r\n  const singupAPI = \"opendata.hopefully.works/api/signup\";\r\n  const response = await post(singupAPI, body);\r\n  console.log(\"response\", response);\r\n  return parseBody(await parseResponse(response));\r\n}\r\n\r\nasync function addAuthHeader(headers = {}) {\r\n  const jwtToken = await getToken();\r\n  console.log(\"jwtToken\", jwtToken);\r\n  const defaultHeader = jwtToken ? { Authorization: jwtToken } : null;\r\n  if (!isEmpty(headers)) {\r\n    return { ...headers, ...defaultHeader };\r\n  }\r\n  return defaultHeader;\r\n}\r\n\r\nexport async function login(email, password) {\r\n  const body = {\r\n    email,\r\n    password\r\n  };\r\n  const lognAPI = \"opendata.hopefully.works/api/login\";\r\n  const response = await post(lognAPI, body);\r\n  return parseBody(await parseResponse(response));\r\n}\r\n\r\nasync function parseBody(data) {\r\n  try {\r\n    return data?.name === \"AbortError\"\r\n      ? null\r\n      : has(data, \"body\")\r\n      ? data.body\r\n      : data;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function parseResponse(response, isCamelCase = true) {\r\n  let data;\r\n  try {\r\n    if (!response.ok) {\r\n      const error = new Error();\r\n      error.apiErrorCode = response.error;\r\n      error.apiErrorMessage = response.message || \"\";\r\n      throw error;\r\n    }\r\n    data = await response.json();\r\n    if (isCamelCase) {\r\n      data = camelize(data);\r\n    }\r\n  } catch (error) {\r\n    data = null;\r\n  }\r\n  return data;\r\n}\r\n// read\r\nasync function get(path, authToken) {\r\n  try {\r\n    const response = await fetch(`http://${path}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        mode: \"cors\"\r\n      }\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n\r\nexport async function getEvents(token) {\r\n  //  const eventsAPI = \"opendata.hopefully.works/api/events\";\r\n  const eventsAPI = \"localhost:5000/getAllEvents\";\r\n  const response = await get(eventsAPI, token);\r\n  return parseBody(await parseResponse(response));\r\n}\r\n","import * as React from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport { has, includes, isEmpty } from \"lodash\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\n\r\nconst EventsData = ({ events }) => {\r\n  console.log(\"events\", events);\r\n  if (isEmpty(events)) return null;\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Data</TableCell>\r\n            <TableCell align=\"left\">Date</TableCell>\r\n            <TableCell align=\"left\">Sensor 1</TableCell>\r\n            <TableCell align=\"left\">Sensor 2</TableCell>\r\n            <TableCell align=\"left\">Sensor 3</TableCell>\r\n            <TableCell align=\"left\">Sensor 4</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {events &&\r\n            events.map(event => (\r\n              <TableRow\r\n                key={event.id}\r\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n              >\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {event.id}\r\n                </TableCell>\r\n                <TableCell align=\"left\">{event.date}</TableCell>\r\n                <TableCell align=\"left\">{event.sensor1}</TableCell>\r\n                <TableCell align=\"left\">{event.sensor2}</TableCell>\r\n                <TableCell align=\"left\">{event.sensor3}</TableCell>\r\n                <TableCell align=\"left\">{event.sensor4}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default EventsData;\r\n","import React, { useEffect, useState } from \"react\";\nimport { getEvents } from \"./MiddlewareAPI\";\nimport EventsData from \"./ShowEventsData\";\nimport \"./App.css\";\n\nfunction App() {\n  const [events, setEvents] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const eventResponse = await getEvents();\n      setEvents(eventResponse);\n    };\n    fetchData();\n  }, []);\n  return (\n    <>\n      <EventsData events={events} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}